<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.project</groupId>
    <artifactId>springboot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>blogapi</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <maven.build.timestamp.format>yyyy_MM_dd_HH</maven.build.timestamp.format>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.15</version>
        </dependency>

        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.4.0</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>mysql</groupId>-->
<!--            <artifactId>mysql-connector-java</artifactId>-->
<!--            <version>5.1.34</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>com.google.collections</groupId>-->
            <!--<artifactId>google-collections</artifactId>-->
            <!--<version>1.0</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.57</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.8</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!-- mybatis分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.5</version>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.9</version>
        </dependency>

        <!-- jwt 两个包 -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.10.2</version>
        </dependency>
        <!-- SpringBoot通用Mapper依赖 -->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>2.1.5</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency><!--添加Swagger依赖 -->
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency><!--添加Swagger-UI依赖 -->
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>27.0.1-jre</version>
        </dependency>
        <!-- 七牛存储的SDK -->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>7.2.2</version>
        </dependency>
        <!--  fastDFS客户端  -->
<!--        <dependency>-->
<!--            <groupId>com.github.tobato</groupId>-->
<!--            <artifactId>fastdfs-client</artifactId>-->
<!--            <version>1.26.1-RELEASE</version>-->
<!--        </dependency>-->
        <dependency> <!--添加热部署依赖 -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>
    </dependencies>
    <build>
    <finalName>blog</finalName>
    <directory>${project.basedir}/target</directory>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <version>1.5.9.RELEASE</version>
        </plugin>
        <plugin>

            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.26.0</version>

            <!--全局配置-->
            <configuration>
<!--                <dockerHost>tcp://localhost:2375</dockerHost>-->
                <dockerHost>tcp://106.53.223.87:9876</dockerHost>
                <!--docker远程访问所需证书地址,如果docker远程主机没有启用TLS验证则不需要配证书-->
                <certPath>/var/jenkins_home/cert/</certPath>

                <!--镜像相关配置,支持多镜像-->
                <images>
                    <!-- 单个镜像配置 -->
                    <image>
                        <!--镜像名(含版本号)-->
                        <name>blogapi:${maven.build.timestamp}</name>
                        <!--别名:用于容器命名和在docker-compose.yml文件只能找到对应名字的配置-->
                        <alias>${project.name}</alias>
                        <!--镜像build相关配置-->
                        <build>
                            <!--使用dockerFile文件-->
                            <dockerFile>Dockerfile</dockerFile>
                            <!--将jar包拷贝到docker build目录中-->
                            <assembly>
                                <descriptorRef>artifact</descriptorRef>
                            </assembly>
                        </build>
                        <run>
                            <!---->
                            <namingStrategy>alias</namingStrategy>
                            <ports>
                                <port>8088:8088</port>
                            </ports>
                        </run>
                    </image>
                </images>
            </configuration>
            <dependencies>
                <!--该插件需要这个依赖-->
                <dependency>
                    <groupId>commons-codec</groupId>
                    <artifactId>commons-codec</artifactId>
                    <version>1.11</version>
                </dependency>
            </dependencies>
        </plugin>
<!--        <plugin>-->
<!--            <groupId>com.spotify</groupId>-->
<!--            <artifactId>docker-maven-plugin</artifactId>-->
<!--            <version>1.0.0</version>-->
<!--            <configuration>-->
<!--                <imageName>blogapi</imageName>-->
<!--                <imageTags>${maven.build.timestamp}</imageTags>-->
<!--                <baseImage>chouko/jdk8</baseImage>-->
<!--                <maintainer>choko</maintainer>-->
<!--                <workdir>/</workdir>-->
<!--                <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>-->
<!--                &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                <resources>-->
<!--                    <resource>-->
<!--                        <targetPath>/</targetPath>-->
<!--                        <directory>${project.build.directory}</directory>-->
<!--                        <include>${project.build.finalName}.jar</include>-->
<!--                    </resource>-->
<!--                </resources>-->
<!--                <dockerHost>https://106.53.223.87:9876</dockerHost>-->
<!--                <dockerCertPath>/var/jenkins_home/cert/</dockerCertPath>-->
<!--            </configuration>-->
<!--        </plugin>-->
    </plugins>
</build>


</project>
